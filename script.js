const emojis = [
    "üê∂", "üê±", "üê≠", "üêπ", "üê∞", "ü¶ä", "üêª", "üêº", "üê®", "üêØ", "ü¶Å", "üêÆ", "üê∑", "üê∏", "üêµ", "üêî", "üêß", "üê¶", "üê§", "ü¶Ü", "ü¶Ö", "ü¶â", "ü¶á", "üê∫", "üêó", "üê¥", "ü¶Ñ", "üêù", "üêõ", "ü¶ã", "üêå", "üêû", "üêú", "ü¶ü", "ü¶ó", "üï∑", "ü¶Ç", "üê¢", "üêç", "ü¶é", "ü¶ñ", "ü¶ï", "üêô", "ü¶ë", "ü¶ê", "ü¶û", "ü¶Ä", "üê°", "üê†", "üêü", "üê¨", "üê≥", "üêã", "ü¶à", "üêä", "üêÖ", "üêÜ", "ü¶ì", "ü¶ç", "ü¶ß", "üêò", "ü¶õ", "ü¶è", "üê™", "üê´", "ü¶í", "ü¶ò", "üêÉ", "üêÇ", "üêÑ", "üêé", "üêñ", "üêè", "üêë", "ü¶ô", "üêê", "ü¶å", "üêï", "üê©", "ü¶Æ", "üêï‚Äçü¶∫", "üêà", "üêì", "ü¶É", "ü¶ö", "ü¶ú", "ü¶¢", "ü¶©", "üïä", "üêá", "ü¶ù", "ü¶®", "ü¶°", "ü¶¶", "ü¶•", "üêÅ", "üêÄ", "üêø", "ü¶î"
];

let level = 1, boardSize = 3, selectedCell = null;
let levelTime = 20, totalTime = 0, maxLevel = 7;
let timerInterval, totalTimeInterval;
let musicStarted = false;

const elements = {
    level: document.getElementById('level'),
    board: document.getElementById('board'),
    message: document.getElementById('message'),
    levelTime: document.getElementById('levelTime'),
    totalTimeValue: document.getElementById('totalTimeValue'),
    music: document.getElementById('music'),
    hintText: document.getElementById('hintText')
};

const rules = [
    "–°–æ–±–µ—Ä–∏ —Å—Ç—Ä–æ–∫—É",
    "–°–æ–±–µ—Ä–∏ —Å—Ç–æ–ª–±–µ—Ü",
    "–°–æ–±–µ—Ä–∏ –¥–∏–∞–≥–æ–Ω–∞–ª—å",
    "–°–æ–±–µ—Ä–∏ –∫–≤–∞–¥—Ä–∞—Ç",
    "–°–æ–±–µ—Ä–∏ –∫—Ä–µ—Å—Ç",
    "–°–æ–±–µ—Ä–∏ –±—É–∫–≤—É S",
    "–°–æ–±–µ—Ä–∏ –±—É–∫–≤—É C"
];

const hints = [
    "—Ä—è–¥",       // –£—Ä–æ–≤–µ–Ω—å 1
    "—Å—Ç–æ–ª–±–∏–∫",   // –£—Ä–æ–≤–µ–Ω—å 2
    "–¥–∏–∞–≥–æ–Ω–∞–ª—å", // –£—Ä–æ–≤–µ–Ω—å 3
    "–∫–≤–∞–¥—Ä–∞—Ç",   // –£—Ä–æ–≤–µ–Ω—å 4
    "–∫—Ä–µ—Å—Ç",     // –£—Ä–æ–≤–µ–Ω—å 5
    "–±—É–∫–≤–∞ s",   // –£—Ä–æ–≤–µ–Ω—å 6
    "–±—É–∫–≤–∞ c"    // –£—Ä–æ–≤–µ–Ω—å 7
];

function caesarCipher(word, shift) {
    const rusAlphabet = '–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è';
    return word
        .toLowerCase()
        .split('')
        .map(char => {
            const index = rusAlphabet.indexOf(char);
            if (index !== -1) {
                const newIndex = (index + shift) % rusAlphabet.length;
                return rusAlphabet[newIndex];
            } else {
                return char; // –û—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –¥—Ä—É–≥–∏–µ —Å–∏–º–≤–æ–ª—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            }
        })
        .join('');
}

function updateHint() {
    const encryptedHint = caesarCipher(hints[level - 1], level);
    elements.hintText.textContent = encryptedHint;
}

function updateRule() {
    elements.message.textContent = rules[level - 1];
}

function createBoard() {
    elements.board.style.gridTemplateColumns = `repeat(${boardSize}, 1fr)`;
    elements.board.innerHTML = '';

    const emojiSet = Array(boardSize).fill()
        .flatMap(() => {
            const emoji = emojis[Math.random() * emojis.length | 0];
            return Array(boardSize).fill(emoji);
        })
        .sort(() => Math.random() - 0.5);

    for (let i = 0; i < boardSize ** 2; i++) {
        const cell = document.createElement('div');
        cell.className = 'cell';
        cell.textContent = emojiSet[i];
        cell.onclick = () => handleClick(i);
        elements.board.appendChild(cell);
    }
}

function handleClick(index) {
    if (!timerInterval) return;

    const cells = elements.board.children;
    const row = Math.floor(index / boardSize);
    const col = index % boardSize;

    if (!selectedCell) {
        selectedCell = { row, col, index };
        cells[index].classList.add('selected');
        return;
    }

    const first = cells[selectedCell.index];
    const second = cells[index];

    [first.textContent, second.textContent] = [second.textContent, first.textContent];

    first.classList.remove('selected');
    selectedCell = null;

    if (checkWin()) handleWin();
}

function checkWin() {
    const cells = elements.board.children;

    switch (level) {
        case 1:
            // –£—Ä–æ–≤–µ–Ω—å 1: –í—Å–µ —ç–º–æ–¥–∑–∏ –≤ —Å—Ç—Ä–æ–∫–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏
            for (let i = 0; i < boardSize; i++) {
                const rowStart = i * boardSize;
                const first = cells[rowStart].textContent;
                for (let j = 1; j < boardSize; j++) {
                    if (cells[rowStart + j].textContent !== first) return false;
                }
            }
            return true;

        case 2:
            // –£—Ä–æ–≤–µ–Ω—å 2: –í—Å–µ —ç–º–æ–¥–∑–∏ –≤ —Å—Ç–æ–ª–±—Ü–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏
            for (let j = 0; j < boardSize; j++) {
                const first = cells[j].textContent;
                for (let i = 1; i < boardSize; i++) {
                    if (cells[i * boardSize + j].textContent !== first) return false;
                }
            }
            return true;

        case 3:
            // –£—Ä–æ–≤–µ–Ω—å 3: –í—Å–µ —ç–º–æ–¥–∑–∏ –Ω–∞ –¥–∏–∞–≥–æ–Ω–∞–ª–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏
            const firstDiagonal = cells[0].textContent;
            const secondDiagonal = cells[boardSize - 1].textContent;
            for (let i = 0; i < boardSize; i++) {
                if (cells[i * boardSize + i].textContent !== firstDiagonal) return false; // –ì–ª–∞–≤–Ω–∞—è –¥–∏–∞–≥–æ–Ω–∞–ª—å
                if (cells[i * boardSize + (boardSize - 1 - i)].textContent !== secondDiagonal) return false; // –ü–æ–±–æ—á–Ω–∞—è –¥–∏–∞–≥–æ–Ω–∞–ª—å
            }
            return true;

        case 4:
            // –£—Ä–æ–≤–µ–Ω—å 4: –ö–≤–∞–¥—Ä–∞—Ç 2x2
            for (let i = 0; i < boardSize - 1; i++) {
                for (let j = 0; j < boardSize - 1; j++) {
                    const index = i * boardSize + j;
                    const first = cells[index].textContent;
                    if (
                        cells[index + 1].textContent !== first ||
                        cells[index + boardSize].textContent !== first ||
                        cells[index + boardSize + 1].textContent !== first
                    ) {
                        return false;
                    }
                }
            }
            return true;

        case 5:
            // –£—Ä–æ–≤–µ–Ω—å 5: –ö—Ä–µ—Å—Ç
            const center = Math.floor(boardSize / 2);
            const centerCell = cells[center * boardSize + center].textContent;
            for (let i = 0; i < boardSize; i++) {
                if (cells[center * boardSize + i].textContent !== centerCell) return false; // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
                if (cells[i * boardSize + center].textContent !== centerCell) return false; // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
            }
            return true;

        case 6:
            // –£—Ä–æ–≤–µ–Ω—å 6: –ë—É–∫–≤–∞ S
            const sPattern = [
                [0, 0], [0, 1], [0, 2],
                [1, 0], [1, 2],
                [2, 0], [2, 1], [2, 2]
            ];
            const firstS = cells[sPattern[0][0] * boardSize + sPattern[0][1]].textContent;
            for (const [row, col] of sPattern) {
                if (cells[row * boardSize + col].textContent !== firstS) return false;
            }
            return true;

        case 7:
            // –£—Ä–æ–≤–µ–Ω—å 7: –ë—É–∫–≤–∞ C
            const cPattern = [
                [0, 0], [0, 1], [0, 2],
                [1, 0],
                [2, 0], [2, 1], [2, 2]
            ];
            const firstC = cells[cPattern[0][0] * boardSize + cPattern[0][1]].textContent;
            for (const [row, col] of cPattern) {
                if (cells[row * boardSize + col].textContent !== firstC) return false;
            }
            return true;

        default:
            return false;
    }
}

function handleWin() {
    clearInterval(timerInterval);
    if (level === maxLevel) {
        elements.message.textContent = `–ü–æ–±–µ–¥–∞! –í—ã –≥–æ—Ç–æ–≤—ã –∫ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—é –≤ school_21. –í—Ä–µ–º—è: ${totalTime}—Å`;
        clearInterval(totalTimeInterval);
        return;
    }

    // –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —à–∞–≥–µ –∫ school_21
    elements.message.textContent = "–í—ã –Ω–∞ —à–∞–≥ –±–ª–∏–∂–µ –∫ school_21";

    // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å
    setTimeout(() => {
        level++;
        boardSize++;
        levelTime += 10;
        elements.level.textContent = level;
        document.body.className = `theme-${level}`;
        elements.message.textContent = ""; // –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        startGame();
    }, 2000); // –ó–∞–¥–µ—Ä–∂–∫–∞ 2 —Å–µ–∫—É–Ω–¥—ã
}

function startTimer() {
    let time = levelTime;
    elements.levelTime.textContent = time;

    timerInterval = setInterval(() => {
        if (--time <= 0) {
            clearInterval(timerInterval);
            if (level === 1) {
                elements.message.textContent = '–¢–∞–ø–Ω–∏—Ç–µ –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞';
                document.addEventListener('click', restartGame, { once: true });
                return;
            }
            level--;
            boardSize--;
            levelTime -= 10;
            elements.level.textContent = level;
            document.body.className = `theme-${level}`;
            startGame();
        }
        elements.levelTime.textContent = time;
    }, 1000);
}

function startGame() {
    clearInterval(timerInterval);
    clearInterval(totalTimeInterval);
    createBoard();
    startTimer();
    updateHint(); // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
    updateRule(); // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª–æ
    totalTimeInterval = setInterval(() => {
        totalTime++;
        elements.totalTimeValue.textContent = totalTime;
    }, 1000);
}

function restartGame() {
    level = 1;
    boardSize = 3;
    levelTime = 20;
    totalTime = 0;
    elements.level.textContent = level;
    elements.totalTimeValue.textContent = totalTime;
    document.body.className = `theme-${level}`;
    startGame();
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener('load', () => {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    elements.music.src = 'bg.mp3'; // –ù–∞–∑–Ω–∞—á–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫
    elements.music.load(); // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ

    // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –∫–ª–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    document.addEventListener('click', () => {
        if (!musicStarted) {
            elements.music.play().then(() => {
                musicStarted = true;
                console.log("–ú—É–∑—ã–∫–∞ –Ω–∞—á–∞–ª–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å—Å—è.");
            }).catch((error) => {
                console.error("–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ:", error);
            });
        }
    }, { once: true });

    // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É
    startGame();
});
